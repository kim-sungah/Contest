import numpy as np
import pandas as pd

train = pd.read_csv('data/final_train.csv')
test = pd.read_csv('data/final_test.csv')

# 학습 및 예측 데이터 분리
x_train = train.drop('가격(백만원)', axis = 1).values
y_train = train['가격(백만원)'].values
y_train = y_train.round().astype(int)

x_test = test

# 학습 데이터 분할
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(x_train, y_train, train_size = 0.7,
                                                   random_state = 1, stratify = None)
# pip install lightgbm
# 교차검증
import lightgbm as lgb
from sklearn.model_selection import GridSearchCV

lgbr = lgb.LGBMRegressor(num_leaves = 31, objective = 'regression', boosting = 'gbdt')
params = {'num_iterations' : [10, 50, 100],
          'learning_rate' : [0.1, 0.5],
          'max_depth' : [6, 8, 10, 12, 14, 16],
          'min_data_in_leaf' : [12, 16, 18, 20]}

lgbr_gs = GridSearchCV(lgbr, param_grid = params, cv = 5, n_jobs = -1)
lgbr_gs.fit(X_train, Y_train)

print(lgbr_gs.best_score_)
print(lgbr_gs.best_params_)
# {'learning_rate': 0.1, 'max_depth': 14, 'min_data_in_leaf': 20, 'num_iterations': 100}

# 모델 학습
lgbr_model = lgb.LGBMRegressor(num_leaves = 31,
                               objective = 'regression',
                               boosting = 'gbdt',
                               max_depth = 14)
lgbr_model.fit(X_train, Y_train)

# 정오분류표(오차행렬)
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

Y_pred = lgbr_model.predict(X_test)
mse = mean_squared_error(Y_test, Y_pred)
mae = mean_absolute_error(Y_test, Y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(Y_test, Y_pred)

print(f'MSE : {mse}, MAE : {mae}, RMSE : {rmse}, R^2 : {r2}')
# MSE : 2.101057312841277, MAE : 0.8005982488744717, RMSE : 1.4495024363005662, R^2 : 0.9985301255987659
