import numpy as np
import pandas as pd

train = pd.read_csv('data/final_train.csv')
test = pd.read_csv('data/final_test.csv')

# 학습 및 예측 데이터 분리
x_train = train.drop('가격(백만원)', axis = 1).values
y_train = train['가격(백만원)'].values
y_train = y_train.round().astype(int)

x_test = test

# 학습 데이터 분할
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(x_train, y_train, train_size = 0.7,
                                                   random_state = 1, stratify = None)

# pip install xgboost
# 교차검증
import xgboost as xgb
from sklearn.model_selection import GridSearchCV

xgbr = xgb.XGBRegressor()
params = {'n_estimators' : [100, 300, 500, 1000],
          'max_depth' : [10, 12, 14, 16],
          'learning_rate' : [0.1, 0.3, 0.5],
          'colsample_bytree' : [0.1, 0.3, 0.5, 0.7],
          'subsample' : [0.3, 0.5, 0.7],
          'min_child_weight' : [1, 3, 5, 7],
          'random_state' : [42],
          'n_jobs' : [-1]}

xgbr_gs = GridSearchCV(xgbr, param_grid = params, cv = 5, n_jobs = -1)
xgbr_gs.fit(X_train, Y_train)

print(xgbr_gs.best_score_)
print(xgbr_gs.best_params_)
# {'colsample_bytree': 0.7, 'learning_rate': 0.1, 'max_depth': 10, 'min_child_weight': 7, 'n_estimators': 100, 'n_jobs': -1, 'random_state': 42, 'subsample': 0.7}

# 모델 훈련
xgbr_model = xgb.XGBRegressor(n_estimators = 100,
                              max_depth = 10,
                              learning_rate = 0.1,
                              colsample_bytree = 0.7,
                              subsample = 0.7,
                              min_child_weight = 7,
                              random_state = 42,
                              n_jobs = -1)
xgbr_model.fit(X_train, Y_train)

# 정오분류표(오차행렬)
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

Y_pred = xgbr_model.predict(X_test)
mse = mean_squared_error(Y_test, Y_pred)
mae = mean_absolute_error(Y_test, Y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(Y_test, Y_pred)

print(f'MSE : {mse}, MAE : {mae}, RMSE : {rmse}, R^2 : {r2}')
# MSE : 2.235434582802845, MAE : 0.8058753356933593, RMSE : 1.495136977939762, R^2 : 0.9984360933303833
