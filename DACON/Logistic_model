import numpy as np
import pandas as pd

train = pd.read_csv('data/final_train.csv')
test = pd.read_csv('data/final_test.csv')

# 학습 및 예측 데이터 분리
x_train = train.drop('가격(백만원)', axis = 1).values
y_train = train['가격(백만원)'].values
y_train = y_train.round().astype(int) # 연속형 값을 반올림하여 정수형으로 변환

x_test = test

# 학습 데이터 분할
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(x_train, y_train, train_size = 0.7,
                                                   random_state = 1, stratify = None)
# 표준화(학습 데이터 기준)
from sklearn.preprocessing import StandardScaler

sc = StandardScaler()
sc.fit(x_train)
X_train_std = sc.transform(X_train)
X_test_std = sc.transform(X_test)

# 로지스틱 회귀 초모수 튜닝
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import GridSearchCV

C_list = [0.01, 0.1, 1.0, 10.0, 100.0]
grid = {'C' : C_list}
logistic_gs = GridSearchCV(estimator = LogisticRegression(random_state = 1),
                          param_grid = grid,
                          scoring = 'accuracy', cv = 10, n_jobs = -1)
logistic_gs.fit(X_train_std, Y_train)

print(logistic_gs.best_score_)
print(logistic_gs.best_params_) # 하이퍼파라미터 C(10) 값을 로지스틱 회귀 모델에 적용

# 모델 훈련
logistic = LogisticRegression(C = 10, random_state = 1)
logistic.fit(X_train_std, Y_train)

# 정오분류표(오차행렬)
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

Y_pred = logistic.predict(X_test_std)
mse = mean_squared_error(Y_test, Y_pred)
mae = mean_absolute_error(Y_test, Y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(Y_test, Y_pred)

print(f'MAE : {mae}, MSE : {mse}, RMSE : {rmse}, R^2 : {r2}')
## MAE : 0.9111111111111111, MSE : 4.656888888888889, RMSE : 2.1579825969847137, R^2 : 0.9967420965980635
